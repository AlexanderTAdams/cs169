#!/usr/local/bin/ruby

=begin
Implement Cartesian Product
=end

class CartesianProduct
  include Enumerable
  # instance variable to maintain cartesian product
  def initialize (seq1, seq2)
    @product = Array.new
    seq1.each { |elt1| seq2.each { |elt2| @product << [elt1, elt2] } }
  end

  attr_accessor :product

  # each method to make this class Enumerable
  def each ; product.each { |elt| yield elt } ; end
end

c = CartesianProduct.new([:a,:b], [4,5])
c.each { |elt| puts elt.inspect }
# [:a, 4]
# [:a, 5]
# [:b, 4]
# [:b, 5]

c = CartesianProduct.new([4,5], [:a,:b])
c.each { |elt| puts elt.inspect }
[].each
puts "reached here"
c.each

c = CartesianProduct.new([:a,:b], [])
c.each { |elt| puts elt.inspect }
# (nothing printed since Cartesian product
# of anything with an empty collection is empty)

c = CartesianProduct.new([], [:a,:b])
c.each { |elt| puts elt.inspect }
